name: "redundancy_ik_net"
layer {
  name: "input"
  type: "MemoryData"
  top: "input"
  top: "dummy_label1"
  memory_data_param {
    batch_size: 32
    channels: 9
    height: 1
    width: 1
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "input"
  top: "ip1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "gaussian"
      std: 1
      sparse: 1
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "sigmoid1"
  type: "Sigmoid"
  bottom: "ip1"
  top: "sigmoid1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "sigmoid1"
  top: "ip2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "gaussian"
      std: 1
      sparse: 1
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "sigmoid2"
  type: "Sigmoid"
  bottom: "ip2"
  top: "sigmoid2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "sigmoid2"
  top: "ip3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "gaussian"
      std: 1
      sparse: 1
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "sigmoid3"
  type: "Sigmoid"
  bottom: "ip3"
  top: "sigmoid3"
}
layer {
  name: "redundancy"
  type: "InnerProduct"
  bottom: "sigmoid3"
  top: "redundancy"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  inner_product_param {
    num_output: 1
    weight_filler {
      type: "gaussian"
      std: 1
      sparse: 1
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "target"
  type: "MemoryData"
  top: "target"
  top: "dummy_label2"
  memory_data_param {
    batch_size: 32
    channels: 6
    height: 1
    width: 1
  }
}
layer {
  name: "normalized_redundancy"
  type: "Sigmoid"
  bottom: "redundancy"
  top: "normalized_redundancy"
}
layer {
  name: "reshape"
  type: "Reshape"
  bottom: "target"
  top: "target2"
  reshape_param {
    shape {
        dim: 0  # copy the dimension from below
        dim: -1 # infer it from the other dimensions
    }
  }
}
layer {
  name: "concate"
  type: "Concat"
  bottom: "target2"
  bottom: "normalized_redundancy"
  top: "redundancy_coords2"
}
layer {
  name: "_redundancy_coords"
  type: "InnerProduct"
  top: "_redundancy_coords"
  bottom: "redundancy_coords2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "gaussian"
      std: 1
      sparse: 1
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "_sigmoid3"
  type: "Sigmoid"
  top: "_sigmoid3"
  bottom: "_redundancy_coords"
}
layer {
  name: "_ip3"
  type: "InnerProduct"
  top: "_ip3"
  bottom: "_sigmoid3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "gaussian"
      std: 1
      sparse: 1
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "_sigmoid2"
  type: "Sigmoid"
  top: "_sigmoid2"
  bottom: "_ip3"
}
layer {
  name: "_ip2"
  type: "InnerProduct"
  top: "_ip2"
  bottom: "_sigmoid2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "gaussian"
      std: 1
      sparse: 1
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "_sigmoid1"
  type: "Sigmoid"
  top: "_sigmoid1"
  bottom: "_ip2"
}
layer {
  name: "_ip1"
  type: "InnerProduct"
  top: "output"
  bottom: "_sigmoid1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  inner_product_param {
    num_output: 9
    weight_filler {
      type: "gaussian"
      std: 1
      sparse: 1
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss"
  type: "EuclideanLoss"
  bottom: "output"
  bottom: "input"
  top: "loss"
}
